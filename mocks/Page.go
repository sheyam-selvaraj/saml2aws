// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	playwright "github.com/playwright-community/playwright-go"
	mock "github.com/stretchr/testify/mock"
)

// Page is an autogenerated mock type for the Page type
type Page struct {
	mock.Mock
}

// AddInitScript provides a mock function with given fields: script
func (_m *Page) AddInitScript(script playwright.Script) error {
	ret := _m.Called(script)

	var r0 error
	if rf, ok := ret.Get(0).(func(playwright.Script) error); ok {
		r0 = rf(script)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddScriptTag provides a mock function with given fields: options
func (_m *Page) AddScriptTag(options playwright.PageAddScriptTagOptions) (playwright.ElementHandle, error) {
	ret := _m.Called(options)

	var r0 playwright.ElementHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(playwright.PageAddScriptTagOptions) (playwright.ElementHandle, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(playwright.PageAddScriptTagOptions) playwright.ElementHandle); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.ElementHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(playwright.PageAddScriptTagOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddStyleTag provides a mock function with given fields: options
func (_m *Page) AddStyleTag(options playwright.PageAddStyleTagOptions) (playwright.ElementHandle, error) {
	ret := _m.Called(options)

	var r0 playwright.ElementHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(playwright.PageAddStyleTagOptions) (playwright.ElementHandle, error)); ok {
		return rf(options)
	}
	if rf, ok := ret.Get(0).(func(playwright.PageAddStyleTagOptions) playwright.ElementHandle); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.ElementHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(playwright.PageAddStyleTagOptions) error); ok {
		r1 = rf(options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BringToFront provides a mock function with given fields:
func (_m *Page) BringToFront() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Check provides a mock function with given fields: selector, options
func (_m *Page) Check(selector string, options ...playwright.PageCheckOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageCheckOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Click provides a mock function with given fields: selector, options
func (_m *Page) Click(selector string, options ...playwright.PageClickOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageClickOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields: options
func (_m *Page) Close(options ...playwright.PageCloseOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...playwright.PageCloseOptions) error); ok {
		r0 = rf(options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Content provides a mock function with given fields:
func (_m *Page) Content() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Context provides a mock function with given fields:
func (_m *Page) Context() playwright.BrowserContext {
	ret := _m.Called()

	var r0 playwright.BrowserContext
	if rf, ok := ret.Get(0).(func() playwright.BrowserContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.BrowserContext)
		}
	}

	return r0
}

// Dblclick provides a mock function with given fields: selector, options
func (_m *Page) Dblclick(selector string, options ...playwright.PageDblclickOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageDblclickOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchEvent provides a mock function with given fields: selector, typ, eventInit, options
func (_m *Page) DispatchEvent(selector string, typ string, eventInit interface{}, options ...playwright.PageDispatchEventOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, typ, eventInit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...playwright.PageDispatchEventOptions) error); ok {
		r0 = rf(selector, typ, eventInit, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DragAndDrop provides a mock function with given fields: source, target, options
func (_m *Page) DragAndDrop(source string, target string, options ...playwright.PageDragAndDropOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, source, target)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PageDragAndDropOptions) error); ok {
		r0 = rf(source, target, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Emit provides a mock function with given fields: name, payload
func (_m *Page) Emit(name string, payload ...interface{}) bool {
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, payload...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...interface{}) bool); ok {
		r0 = rf(name, payload...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EmulateMedia provides a mock function with given fields: options
func (_m *Page) EmulateMedia(options ...playwright.PageEmulateMediaOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...playwright.PageEmulateMediaOptions) error); ok {
		r0 = rf(options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EvalOnSelector provides a mock function with given fields: selector, expression, arg, options
func (_m *Page) EvalOnSelector(selector string, expression string, arg interface{}, options ...playwright.PageEvalOnSelectorOptions) (interface{}, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, expression, arg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...playwright.PageEvalOnSelectorOptions) (interface{}, error)); ok {
		return rf(selector, expression, arg, options...)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, ...playwright.PageEvalOnSelectorOptions) interface{}); ok {
		r0 = rf(selector, expression, arg, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, ...playwright.PageEvalOnSelectorOptions) error); ok {
		r1 = rf(selector, expression, arg, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvalOnSelectorAll provides a mock function with given fields: selector, expression, arg
func (_m *Page) EvalOnSelectorAll(selector string, expression string, arg ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, selector, expression)
	_ca = append(_ca, arg...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) (interface{}, error)); ok {
		return rf(selector, expression, arg...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...interface{}) interface{}); ok {
		r0 = rf(selector, expression, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, ...interface{}) error); ok {
		r1 = rf(selector, expression, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Evaluate provides a mock function with given fields: expression, arg
func (_m *Page) Evaluate(expression string, arg ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, expression)
	_ca = append(_ca, arg...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (interface{}, error)); ok {
		return rf(expression, arg...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) interface{}); ok {
		r0 = rf(expression, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(expression, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateHandle provides a mock function with given fields: expression, arg
func (_m *Page) EvaluateHandle(expression string, arg ...interface{}) (playwright.JSHandle, error) {
	var _ca []interface{}
	_ca = append(_ca, expression)
	_ca = append(_ca, arg...)
	ret := _m.Called(_ca...)

	var r0 playwright.JSHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (playwright.JSHandle, error)); ok {
		return rf(expression, arg...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) playwright.JSHandle); ok {
		r0 = rf(expression, arg...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.JSHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(expression, arg...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectConsoleMessage provides a mock function with given fields: cb, options
func (_m *Page) ExpectConsoleMessage(cb func() error, options ...playwright.PageExpectConsoleMessageOptions) (playwright.ConsoleMessage, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.ConsoleMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectConsoleMessageOptions) (playwright.ConsoleMessage, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectConsoleMessageOptions) playwright.ConsoleMessage); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.ConsoleMessage)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectConsoleMessageOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectDownload provides a mock function with given fields: cb, options
func (_m *Page) ExpectDownload(cb func() error, options ...playwright.PageExpectDownloadOptions) (playwright.Download, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Download
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectDownloadOptions) (playwright.Download, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectDownloadOptions) playwright.Download); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Download)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectDownloadOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectEvent provides a mock function with given fields: event, cb, options
func (_m *Page) ExpectEvent(event string, cb func() error, options ...playwright.PageExpectEventOptions) (interface{}, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, func() error, ...playwright.PageExpectEventOptions) (interface{}, error)); ok {
		return rf(event, cb, options...)
	}
	if rf, ok := ret.Get(0).(func(string, func() error, ...playwright.PageExpectEventOptions) interface{}); ok {
		r0 = rf(event, cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, func() error, ...playwright.PageExpectEventOptions) error); ok {
		r1 = rf(event, cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectFileChooser provides a mock function with given fields: cb, options
func (_m *Page) ExpectFileChooser(cb func() error, options ...playwright.PageExpectFileChooserOptions) (playwright.FileChooser, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.FileChooser
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectFileChooserOptions) (playwright.FileChooser, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectFileChooserOptions) playwright.FileChooser); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.FileChooser)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectFileChooserOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectNavigation provides a mock function with given fields: cb, options
func (_m *Page) ExpectNavigation(cb func() error, options ...playwright.PageExpectNavigationOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectNavigationOptions) (playwright.Response, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectNavigationOptions) playwright.Response); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectNavigationOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectPopup provides a mock function with given fields: cb, options
func (_m *Page) ExpectPopup(cb func() error, options ...playwright.PageExpectPopupOptions) (playwright.Page, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Page
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectPopupOptions) (playwright.Page, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectPopupOptions) playwright.Page); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Page)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectPopupOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectRequest provides a mock function with given fields: urlOrPredicate, cb, options
func (_m *Page) ExpectRequest(urlOrPredicate interface{}, cb func() error, options ...playwright.PageExpectRequestOptions) (playwright.Request, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, urlOrPredicate, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, func() error, ...playwright.PageExpectRequestOptions) (playwright.Request, error)); ok {
		return rf(urlOrPredicate, cb, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, func() error, ...playwright.PageExpectRequestOptions) playwright.Request); ok {
		r0 = rf(urlOrPredicate, cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, func() error, ...playwright.PageExpectRequestOptions) error); ok {
		r1 = rf(urlOrPredicate, cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectRequestFinished provides a mock function with given fields: cb, options
func (_m *Page) ExpectRequestFinished(cb func() error, options ...playwright.PageExpectRequestFinishedOptions) (playwright.Request, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectRequestFinishedOptions) (playwright.Request, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectRequestFinishedOptions) playwright.Request); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectRequestFinishedOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectResponse provides a mock function with given fields: urlOrPredicate, cb, options
func (_m *Page) ExpectResponse(urlOrPredicate interface{}, cb func() error, options ...playwright.PageExpectResponseOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, urlOrPredicate, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}, func() error, ...playwright.PageExpectResponseOptions) (playwright.Response, error)); ok {
		return rf(urlOrPredicate, cb, options...)
	}
	if rf, ok := ret.Get(0).(func(interface{}, func() error, ...playwright.PageExpectResponseOptions) playwright.Response); ok {
		r0 = rf(urlOrPredicate, cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}, func() error, ...playwright.PageExpectResponseOptions) error); ok {
		r1 = rf(urlOrPredicate, cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectWebSocket provides a mock function with given fields: cb, options
func (_m *Page) ExpectWebSocket(cb func() error, options ...playwright.PageExpectWebSocketOptions) (playwright.WebSocket, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.WebSocket
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectWebSocketOptions) (playwright.WebSocket, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectWebSocketOptions) playwright.WebSocket); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.WebSocket)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectWebSocketOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpectWorker provides a mock function with given fields: cb, options
func (_m *Page) ExpectWorker(cb func() error, options ...playwright.PageExpectWorkerOptions) (playwright.Worker, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cb)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Worker
	var r1 error
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectWorkerOptions) (playwright.Worker, error)); ok {
		return rf(cb, options...)
	}
	if rf, ok := ret.Get(0).(func(func() error, ...playwright.PageExpectWorkerOptions) playwright.Worker); ok {
		r0 = rf(cb, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Worker)
		}
	}

	if rf, ok := ret.Get(1).(func(func() error, ...playwright.PageExpectWorkerOptions) error); ok {
		r1 = rf(cb, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExposeBinding provides a mock function with given fields: name, binding, handle
func (_m *Page) ExposeBinding(name string, binding playwright.BindingCallFunction, handle ...bool) error {
	_va := make([]interface{}, len(handle))
	for _i := range handle {
		_va[_i] = handle[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, binding)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, playwright.BindingCallFunction, ...bool) error); ok {
		r0 = rf(name, binding, handle...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExposeFunction provides a mock function with given fields: name, binding
func (_m *Page) ExposeFunction(name string, binding func([]interface{}) interface{}) error {
	ret := _m.Called(name, binding)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]interface{}) interface{}) error); ok {
		r0 = rf(name, binding)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fill provides a mock function with given fields: selector, value, options
func (_m *Page) Fill(selector string, value string, options ...playwright.PageFillOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PageFillOptions) error); ok {
		r0 = rf(selector, value, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Focus provides a mock function with given fields: selector, options
func (_m *Page) Focus(selector string, options ...playwright.PageFocusOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageFocusOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Frame provides a mock function with given fields: options
func (_m *Page) Frame(options ...playwright.PageFrameOptions) playwright.Frame {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Frame
	if rf, ok := ret.Get(0).(func(...playwright.PageFrameOptions) playwright.Frame); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Frame)
		}
	}

	return r0
}

// FrameLocator provides a mock function with given fields: selector
func (_m *Page) FrameLocator(selector string) playwright.FrameLocator {
	ret := _m.Called(selector)

	var r0 playwright.FrameLocator
	if rf, ok := ret.Get(0).(func(string) playwright.FrameLocator); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.FrameLocator)
		}
	}

	return r0
}

// Frames provides a mock function with given fields:
func (_m *Page) Frames() []playwright.Frame {
	ret := _m.Called()

	var r0 []playwright.Frame
	if rf, ok := ret.Get(0).(func() []playwright.Frame); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]playwright.Frame)
		}
	}

	return r0
}

// GetAttribute provides a mock function with given fields: selector, name, options
func (_m *Page) GetAttribute(selector string, name string, options ...playwright.PageGetAttributeOptions) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PageGetAttributeOptions) (string, error)); ok {
		return rf(selector, name, options...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PageGetAttributeOptions) string); ok {
		r0 = rf(selector, name, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, ...playwright.PageGetAttributeOptions) error); ok {
		r1 = rf(selector, name, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByAltText provides a mock function with given fields: text, options
func (_m *Page) GetByAltText(text interface{}, options ...playwright.PageGetByAltTextOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageGetByAltTextOptions) playwright.Locator); ok {
		r0 = rf(text, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByLabel provides a mock function with given fields: text, options
func (_m *Page) GetByLabel(text interface{}, options ...playwright.PageGetByLabelOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageGetByLabelOptions) playwright.Locator); ok {
		r0 = rf(text, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByPlaceholder provides a mock function with given fields: text, options
func (_m *Page) GetByPlaceholder(text interface{}, options ...playwright.PageGetByPlaceholderOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageGetByPlaceholderOptions) playwright.Locator); ok {
		r0 = rf(text, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByRole provides a mock function with given fields: role, options
func (_m *Page) GetByRole(role playwright.AriaRole, options ...playwright.PageGetByRoleOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(playwright.AriaRole, ...playwright.PageGetByRoleOptions) playwright.Locator); ok {
		r0 = rf(role, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByTestId provides a mock function with given fields: testId
func (_m *Page) GetByTestId(testId interface{}) playwright.Locator {
	ret := _m.Called(testId)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}) playwright.Locator); ok {
		r0 = rf(testId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByText provides a mock function with given fields: text, options
func (_m *Page) GetByText(text interface{}, options ...playwright.PageGetByTextOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageGetByTextOptions) playwright.Locator); ok {
		r0 = rf(text, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GetByTitle provides a mock function with given fields: text, options
func (_m *Page) GetByTitle(text interface{}, options ...playwright.PageGetByTitleOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageGetByTitleOptions) playwright.Locator); ok {
		r0 = rf(text, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// GoBack provides a mock function with given fields: options
func (_m *Page) GoBack(options ...playwright.PageGoBackOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(...playwright.PageGoBackOptions) (playwright.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...playwright.PageGoBackOptions) playwright.Response); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(...playwright.PageGoBackOptions) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoForward provides a mock function with given fields: options
func (_m *Page) GoForward(options ...playwright.PageGoForwardOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(...playwright.PageGoForwardOptions) (playwright.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...playwright.PageGoForwardOptions) playwright.Response); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(...playwright.PageGoForwardOptions) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Goto provides a mock function with given fields: url, options
func (_m *Page) Goto(url string, options ...playwright.PageGotoOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageGotoOptions) (playwright.Response, error)); ok {
		return rf(url, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageGotoOptions) playwright.Response); ok {
		r0 = rf(url, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageGotoOptions) error); ok {
		r1 = rf(url, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Hover provides a mock function with given fields: selector, options
func (_m *Page) Hover(selector string, options ...playwright.PageHoverOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageHoverOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InnerHTML provides a mock function with given fields: selector, options
func (_m *Page) InnerHTML(selector string, options ...playwright.PageInnerHTMLOptions) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInnerHTMLOptions) (string, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInnerHTMLOptions) string); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageInnerHTMLOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InnerText provides a mock function with given fields: selector, options
func (_m *Page) InnerText(selector string, options ...playwright.PageInnerTextOptions) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInnerTextOptions) (string, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInnerTextOptions) string); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageInnerTextOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InputValue provides a mock function with given fields: selector, options
func (_m *Page) InputValue(selector string, options ...playwright.PageInputValueOptions) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInputValueOptions) (string, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageInputValueOptions) string); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageInputValueOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsChecked provides a mock function with given fields: selector, options
func (_m *Page) IsChecked(selector string, options ...playwright.PageIsCheckedOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsCheckedOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsCheckedOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsCheckedOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsClosed provides a mock function with given fields:
func (_m *Page) IsClosed() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsDisabled provides a mock function with given fields: selector, options
func (_m *Page) IsDisabled(selector string, options ...playwright.PageIsDisabledOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsDisabledOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsDisabledOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsDisabledOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEditable provides a mock function with given fields: selector, options
func (_m *Page) IsEditable(selector string, options ...playwright.PageIsEditableOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsEditableOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsEditableOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsEditableOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEnabled provides a mock function with given fields: selector, options
func (_m *Page) IsEnabled(selector string, options ...playwright.PageIsEnabledOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsEnabledOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsEnabledOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsEnabledOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsHidden provides a mock function with given fields: selector, options
func (_m *Page) IsHidden(selector string, options ...playwright.PageIsHiddenOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsHiddenOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsHiddenOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsHiddenOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVisible provides a mock function with given fields: selector, options
func (_m *Page) IsVisible(selector string, options ...playwright.PageIsVisibleOptions) (bool, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsVisibleOptions) (bool, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageIsVisibleOptions) bool); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageIsVisibleOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Keyboard provides a mock function with given fields:
func (_m *Page) Keyboard() playwright.Keyboard {
	ret := _m.Called()

	var r0 playwright.Keyboard
	if rf, ok := ret.Get(0).(func() playwright.Keyboard); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Keyboard)
		}
	}

	return r0
}

// ListenerCount provides a mock function with given fields: name
func (_m *Page) ListenerCount(name string) int {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Locator provides a mock function with given fields: selector, options
func (_m *Page) Locator(selector string, options ...playwright.PageLocatorOptions) playwright.Locator {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Locator
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageLocatorOptions) playwright.Locator); ok {
		r0 = rf(selector, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Locator)
		}
	}

	return r0
}

// MainFrame provides a mock function with given fields:
func (_m *Page) MainFrame() playwright.Frame {
	ret := _m.Called()

	var r0 playwright.Frame
	if rf, ok := ret.Get(0).(func() playwright.Frame); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Frame)
		}
	}

	return r0
}

// Mouse provides a mock function with given fields:
func (_m *Page) Mouse() playwright.Mouse {
	ret := _m.Called()

	var r0 playwright.Mouse
	if rf, ok := ret.Get(0).(func() playwright.Mouse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Mouse)
		}
	}

	return r0
}

// On provides a mock function with given fields: name, handler
func (_m *Page) On(name string, handler interface{}) {
	_m.Called(name, handler)
}

// OnClose provides a mock function with given fields: fn
func (_m *Page) OnClose(fn func(playwright.Page)) {
	_m.Called(fn)
}

// OnConsole provides a mock function with given fields: fn
func (_m *Page) OnConsole(fn func(playwright.ConsoleMessage)) {
	_m.Called(fn)
}

// OnCrash provides a mock function with given fields: fn
func (_m *Page) OnCrash(fn func(playwright.Page)) {
	_m.Called(fn)
}

// OnDOMContentLoaded provides a mock function with given fields: fn
func (_m *Page) OnDOMContentLoaded(fn func(playwright.Page)) {
	_m.Called(fn)
}

// OnDialog provides a mock function with given fields: fn
func (_m *Page) OnDialog(fn func(playwright.Dialog)) {
	_m.Called(fn)
}

// OnDownload provides a mock function with given fields: fn
func (_m *Page) OnDownload(fn func(playwright.Download)) {
	_m.Called(fn)
}

// OnFileChooser provides a mock function with given fields: fn
func (_m *Page) OnFileChooser(fn func(playwright.FileChooser)) {
	_m.Called(fn)
}

// OnFrameAttached provides a mock function with given fields: fn
func (_m *Page) OnFrameAttached(fn func(playwright.Frame)) {
	_m.Called(fn)
}

// OnFrameDetached provides a mock function with given fields: fn
func (_m *Page) OnFrameDetached(fn func(playwright.Frame)) {
	_m.Called(fn)
}

// OnFrameNavigated provides a mock function with given fields: fn
func (_m *Page) OnFrameNavigated(fn func(playwright.Frame)) {
	_m.Called(fn)
}

// OnLoad provides a mock function with given fields: fn
func (_m *Page) OnLoad(fn func(playwright.Page)) {
	_m.Called(fn)
}

// OnPageError provides a mock function with given fields: fn
func (_m *Page) OnPageError(fn func(*playwright.Error)) {
	_m.Called(fn)
}

// OnPopup provides a mock function with given fields: fn
func (_m *Page) OnPopup(fn func(playwright.Page)) {
	_m.Called(fn)
}

// OnRequest provides a mock function with given fields: fn
func (_m *Page) OnRequest(fn func(playwright.Request)) {
	_m.Called(fn)
}

// OnRequestFailed provides a mock function with given fields: fn
func (_m *Page) OnRequestFailed(fn func(playwright.Request)) {
	_m.Called(fn)
}

// OnRequestFinished provides a mock function with given fields: fn
func (_m *Page) OnRequestFinished(fn func(playwright.Request)) {
	_m.Called(fn)
}

// OnResponse provides a mock function with given fields: fn
func (_m *Page) OnResponse(fn func(playwright.Response)) {
	_m.Called(fn)
}

// OnWebSocket provides a mock function with given fields: fn
func (_m *Page) OnWebSocket(fn func(playwright.WebSocket)) {
	_m.Called(fn)
}

// OnWorker provides a mock function with given fields: fn
func (_m *Page) OnWorker(fn func(playwright.Worker)) {
	_m.Called(fn)
}

// Once provides a mock function with given fields: name, handler
func (_m *Page) Once(name string, handler interface{}) {
	_m.Called(name, handler)
}

// Opener provides a mock function with given fields:
func (_m *Page) Opener() (playwright.Page, error) {
	ret := _m.Called()

	var r0 playwright.Page
	var r1 error
	if rf, ok := ret.Get(0).(func() (playwright.Page, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() playwright.Page); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Page)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PDF provides a mock function with given fields: options
func (_m *Page) PDF(options ...playwright.PagePdfOptions) ([]byte, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(...playwright.PagePdfOptions) ([]byte, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...playwright.PagePdfOptions) []byte); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(...playwright.PagePdfOptions) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pause provides a mock function with given fields:
func (_m *Page) Pause() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Press provides a mock function with given fields: selector, key, options
func (_m *Page) Press(selector string, key string, options ...playwright.PagePressOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PagePressOptions) error); ok {
		r0 = rf(selector, key, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QuerySelector provides a mock function with given fields: selector, options
func (_m *Page) QuerySelector(selector string, options ...playwright.PageQuerySelectorOptions) (playwright.ElementHandle, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.ElementHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageQuerySelectorOptions) (playwright.ElementHandle, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageQuerySelectorOptions) playwright.ElementHandle); ok {
		r0 = rf(selector, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.ElementHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageQuerySelectorOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuerySelectorAll provides a mock function with given fields: selector
func (_m *Page) QuerySelectorAll(selector string) ([]playwright.ElementHandle, error) {
	ret := _m.Called(selector)

	var r0 []playwright.ElementHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]playwright.ElementHandle, error)); ok {
		return rf(selector)
	}
	if rf, ok := ret.Get(0).(func(string) []playwright.ElementHandle); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]playwright.ElementHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(selector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reload provides a mock function with given fields: options
func (_m *Page) Reload(options ...playwright.PageReloadOptions) (playwright.Response, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(...playwright.PageReloadOptions) (playwright.Response, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...playwright.PageReloadOptions) playwright.Response); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(...playwright.PageReloadOptions) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveListener provides a mock function with given fields: name, handler
func (_m *Page) RemoveListener(name string, handler interface{}) {
	_m.Called(name, handler)
}

// Request provides a mock function with given fields:
func (_m *Page) Request() playwright.APIRequestContext {
	ret := _m.Called()

	var r0 playwright.APIRequestContext
	if rf, ok := ret.Get(0).(func() playwright.APIRequestContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.APIRequestContext)
		}
	}

	return r0
}

// Route provides a mock function with given fields: url, handler, times
func (_m *Page) Route(url interface{}, handler func(playwright.Route), times ...int) error {
	_va := make([]interface{}, len(times))
	for _i := range times {
		_va[_i] = times[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url, handler)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, func(playwright.Route), ...int) error); ok {
		r0 = rf(url, handler, times...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RouteFromHAR provides a mock function with given fields: har, options
func (_m *Page) RouteFromHAR(har string, options ...playwright.PageRouteFromHAROptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, har)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageRouteFromHAROptions) error); ok {
		r0 = rf(har, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Screenshot provides a mock function with given fields: options
func (_m *Page) Screenshot(options ...playwright.PageScreenshotOptions) ([]byte, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(...playwright.PageScreenshotOptions) ([]byte, error)); ok {
		return rf(options...)
	}
	if rf, ok := ret.Get(0).(func(...playwright.PageScreenshotOptions) []byte); ok {
		r0 = rf(options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(...playwright.PageScreenshotOptions) error); ok {
		r1 = rf(options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectOption provides a mock function with given fields: selector, values, options
func (_m *Page) SelectOption(selector string, values playwright.SelectOptionValues, options ...playwright.PageSelectOptionOptions) ([]string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, values)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, playwright.SelectOptionValues, ...playwright.PageSelectOptionOptions) ([]string, error)); ok {
		return rf(selector, values, options...)
	}
	if rf, ok := ret.Get(0).(func(string, playwright.SelectOptionValues, ...playwright.PageSelectOptionOptions) []string); ok {
		r0 = rf(selector, values, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, playwright.SelectOptionValues, ...playwright.PageSelectOptionOptions) error); ok {
		r1 = rf(selector, values, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetChecked provides a mock function with given fields: selector, checked, options
func (_m *Page) SetChecked(selector string, checked bool, options ...playwright.PageSetCheckedOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, checked)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, bool, ...playwright.PageSetCheckedOptions) error); ok {
		r0 = rf(selector, checked, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetContent provides a mock function with given fields: html, options
func (_m *Page) SetContent(html string, options ...playwright.PageSetContentOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, html)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageSetContentOptions) error); ok {
		r0 = rf(html, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetDefaultNavigationTimeout provides a mock function with given fields: timeout
func (_m *Page) SetDefaultNavigationTimeout(timeout float64) {
	_m.Called(timeout)
}

// SetDefaultTimeout provides a mock function with given fields: timeout
func (_m *Page) SetDefaultTimeout(timeout float64) {
	_m.Called(timeout)
}

// SetExtraHTTPHeaders provides a mock function with given fields: headers
func (_m *Page) SetExtraHTTPHeaders(headers map[string]string) error {
	ret := _m.Called(headers)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(headers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetInputFiles provides a mock function with given fields: selector, files, options
func (_m *Page) SetInputFiles(selector string, files []playwright.InputFile, options ...playwright.PageSetInputFilesOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, files)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []playwright.InputFile, ...playwright.PageSetInputFilesOptions) error); ok {
		r0 = rf(selector, files, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetViewportSize provides a mock function with given fields: width, height
func (_m *Page) SetViewportSize(width int, height int) error {
	ret := _m.Called(width, height)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(width, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tap provides a mock function with given fields: selector, options
func (_m *Page) Tap(selector string, options ...playwright.PageTapOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageTapOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TextContent provides a mock function with given fields: selector, options
func (_m *Page) TextContent(selector string, options ...playwright.PageTextContentOptions) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageTextContentOptions) (string, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageTextContentOptions) string); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageTextContentOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Title provides a mock function with given fields:
func (_m *Page) Title() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Touchscreen provides a mock function with given fields:
func (_m *Page) Touchscreen() playwright.Touchscreen {
	ret := _m.Called()

	var r0 playwright.Touchscreen
	if rf, ok := ret.Get(0).(func() playwright.Touchscreen); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Touchscreen)
		}
	}

	return r0
}

// Type provides a mock function with given fields: selector, text, options
func (_m *Page) Type(selector string, text string, options ...playwright.PageTypeOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector, text)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, ...playwright.PageTypeOptions) error); ok {
		r0 = rf(selector, text, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// URL provides a mock function with given fields:
func (_m *Page) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Uncheck provides a mock function with given fields: selector, options
func (_m *Page) Uncheck(selector string, options ...playwright.PageUncheckOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageUncheckOptions) error); ok {
		r0 = rf(selector, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unroute provides a mock function with given fields: url, handler
func (_m *Page) Unroute(url interface{}, handler ...func(playwright.Route)) error {
	_va := make([]interface{}, len(handler))
	for _i := range handler {
		_va[_i] = handler[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...func(playwright.Route)) error); ok {
		r0 = rf(url, handler...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Video provides a mock function with given fields:
func (_m *Page) Video() playwright.Video {
	ret := _m.Called()

	var r0 playwright.Video
	if rf, ok := ret.Get(0).(func() playwright.Video); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.Video)
		}
	}

	return r0
}

// ViewportSize provides a mock function with given fields:
func (_m *Page) ViewportSize() *playwright.Size {
	ret := _m.Called()

	var r0 *playwright.Size
	if rf, ok := ret.Get(0).(func() *playwright.Size); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*playwright.Size)
		}
	}

	return r0
}

// WaitForEvent provides a mock function with given fields: event, options
func (_m *Page) WaitForEvent(event string, options ...playwright.PageWaitForEventOptions) (interface{}, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, event)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageWaitForEventOptions) (interface{}, error)); ok {
		return rf(event, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageWaitForEventOptions) interface{}); ok {
		r0 = rf(event, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageWaitForEventOptions) error); ok {
		r1 = rf(event, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForFunction provides a mock function with given fields: expression, arg, options
func (_m *Page) WaitForFunction(expression string, arg interface{}, options ...playwright.PageWaitForFunctionOptions) (playwright.JSHandle, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, expression, arg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.JSHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string, interface{}, ...playwright.PageWaitForFunctionOptions) (playwright.JSHandle, error)); ok {
		return rf(expression, arg, options...)
	}
	if rf, ok := ret.Get(0).(func(string, interface{}, ...playwright.PageWaitForFunctionOptions) playwright.JSHandle); ok {
		r0 = rf(expression, arg, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.JSHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string, interface{}, ...playwright.PageWaitForFunctionOptions) error); ok {
		r1 = rf(expression, arg, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForLoadState provides a mock function with given fields: options
func (_m *Page) WaitForLoadState(options ...playwright.PageWaitForLoadStateOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...playwright.PageWaitForLoadStateOptions) error); ok {
		r0 = rf(options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitForSelector provides a mock function with given fields: selector, options
func (_m *Page) WaitForSelector(selector string, options ...playwright.PageWaitForSelectorOptions) (playwright.ElementHandle, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, selector)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 playwright.ElementHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageWaitForSelectorOptions) (playwright.ElementHandle, error)); ok {
		return rf(selector, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...playwright.PageWaitForSelectorOptions) playwright.ElementHandle); ok {
		r0 = rf(selector, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(playwright.ElementHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...playwright.PageWaitForSelectorOptions) error); ok {
		r1 = rf(selector, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitForTimeout provides a mock function with given fields: timeout
func (_m *Page) WaitForTimeout(timeout float64) {
	_m.Called(timeout)
}

// WaitForURL provides a mock function with given fields: url, options
func (_m *Page) WaitForURL(url interface{}, options ...playwright.PageWaitForURLOptions) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, url)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, ...playwright.PageWaitForURLOptions) error); ok {
		r0 = rf(url, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Workers provides a mock function with given fields:
func (_m *Page) Workers() []playwright.Worker {
	ret := _m.Called()

	var r0 []playwright.Worker
	if rf, ok := ret.Get(0).(func() []playwright.Worker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]playwright.Worker)
		}
	}

	return r0
}

// NewPage creates a new instance of Page. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Page {
	mock := &Page{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
